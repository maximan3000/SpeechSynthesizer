#pragma once

namespace SpeechSynthesizer
{

	/* константы для обозначения типа буквы */
	const enum type_letter {
		name_not_a_letter = 0, //не русская буква (#)
		name_soglasn = 1, // согласная с 1 звуком (жйцчшщ)
		name_glasn = 2, //гласная с 1 звуками (эоуаиы)
		name_soglasn2 = 3, //согласная с 2 звуками (бвгдзклмнпрстфх)
		name_glasn2 = 4, //гласная с 2 звуками (еёюя)
		name_znak = 5 //ъ или ь знак (ьъ)
	};
	
	/* Виртуальный класс - звук. 
	Он описывает свойства и методы, присущие
	для произносимого звука русского языка
	*/
	class Sound
	{	
	private:
		/* поле класса - обозначение звука */
		std::string snd; 
		/* поле класса - буква, звук которой описывается звука */
		std::string bukv;
		
	public:
		/* неявный конструктор - никакой звук */
		Sound() : snd(""), bukv("") {} 
		/* обычный конструктор - одна буква, один звук */
		Sound(std::string snd, std::string bukv) : snd(snd), bukv(bukv) {};
			
		/* полиморфные методы */

		/* возвращает тип буквы - согласная, гласная, гласная с 2 звуками, согласная с 2 звуками */
		virtual short MyName() = 0; 
		/* возвращает второй звук буквы. По умолчанию этот второй звук равен первому */
		virtual std::string return_second_sound() { return snd; }; 

		/* общие для всех звуков методы */

		/* возвращает true, если этому символу соответствует класс с этой буквой */
		bool IsMe(std::string ch) { return (ch == bukv ? true : false); };
		/* возвращает первый звук буквы. Не виртуальный, так как у всех букв есть первый звук */
		std::string return_first_sound() { return snd; };
			
	};

}


